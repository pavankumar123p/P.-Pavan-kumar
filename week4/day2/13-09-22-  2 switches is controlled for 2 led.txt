
// PIC18F458 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = HS         // Oscillator Selection bits (HS oscillator)
#pragma config OSCS = OFF       // Oscillator System Clock Switch Enable bit (Oscillator system clock switch option is disabled (main oscillator is source))

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF        // Brown-out Reset Enable bit (Brown-out Reset disabled)
#pragma config BORV = 25        // Brown-out Reset Voltage bits (VBOR set to 2.5V)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 128      // Watchdog Timer Postscale Select bits (1:128)

// CONFIG4L
#pragma config STVR = OFF       // Stack Full/Underflow Reset Enable bit (Stack Full/Underflow will not cause Reset)
#pragma config LVP = OFF        // Low-Voltage ICSP Enable bit (Low-Voltage ICSP disabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000200-001FFFh) not code protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000200-001FFFh) not write protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000200-001FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from Table Reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from Table Reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define __XTAL_FREQ 2000000
int main()
{   TRISBbits.RB1=1;  //set the RB1 pin as input
    TRISBbits.RB2=1;  //set the RB2 pin as input
    TRISCbits.RC1=0;  //set the RC0 pin as output
    TRISCbits.RC2=0;  //set the RC1 pin as output
    INTCON2=0X00;     //disable pull register
    PORTCbits.RC1=0;  //setting RC1 as low
    PORTCbits.RC2=0; //setting RC2 as low
    while(1)
    {
        if(PORTBbits.RB1==0) //set the port B is low
        {
        int i=0;
        while(i<5) //check the condition for looping
        {
        PORTCbits.RC1=1;           //set the RC1 is high
        for(long int i=0;i<50000;i++); //enable the delay
        PORTCbits.RC1=0;   //set the RC1 is high
        for(long int i=0;i<50000;i++)
        i++;
        }
         PORTCbits.RC1=0;
         int j=0;
        while(j<3)
        {
        PORTCbits.RC2=1; //set the RC2 is high
        for(long int i=0;i<50000;i++);  //enable the delay
        PORTCbits.RC2=0; //set the RC2 is high
        for(long int i=0;i<50000;i++);  //enable the delay
        j++;
        }
        }
        else if(PORTBbits.RB2==0)
        {
        int k=0;
        while(k<5)
        {
        PORTCbits.RC2=1; //set the RC2 is high
        for(long int i=0;i<50000;i++);  //enable the delay
        PORTCbits.RC2=0;  //set the RC2 is high
        for(long int i=0;i<50000;i++);  //enable the delay
        k++;
        }
         PORTCbits.RC2=0;
         int l=0;
        while(l<3)
        {
        PORTCbits.RC1=1; //set the RC1 is high
        for(long int i=0;i<50000;i++); //enable the delay
        PORTCbits.RC1=0; //set the RC1 is high
        for(long int i=0;i<50000;i++); //enable the delay
        l++;
        }
        }
        else
            PORTCbits.RC1=0; //set the RC1 is high
         PORTCbits.RC2=0; //set the RC2 is high
            
    }
    
    }
